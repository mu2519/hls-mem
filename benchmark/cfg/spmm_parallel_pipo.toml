rams = [
  { type = 'RAM', name = 'ram_a_row', datawidth = 'datawidth', addrwidth = 10 },
  { type = 'PIPO', name = 'ram_a_col', datawidth = 'datawidth', addrwidth = 10 },
  { type = 'PIPO', name = 'ram_a_val', datawidth = 'datawidth', addrwidth = 10 },
  { type = 'PIPO', name = 'ram_b', datawidth = 'packed_datawidth', addrwidth = 10 },
  { type = 'PIPO', name = 'ram_c', datawidth = 'packed_datawidth', addrwidth = 10, numports = 2 },
]

axis = [
  [ 'axi_a_row', 'datawidth' ],
  [ 'axi_a_col', 'datawidth' ],
  [ 'axi_a_val', 'datawidth' ],
  [ 'axi_b', 'axi_wide_width' ],
  [ 'axi_c', 'axi_wide_width' ],
]

comp_body = '''
b_chunk_num = b_width >> log_parallelism
ram_a_row.dma_read(axi_a_row, 0, a_row_offset, a_height + 1)
row_begin = ram_a_row.read(0)
a_col_addr = a_col_offset
a_val_addr = a_val_offset
c_addr = c_offset
for i in range(1, a_height + 1):
    row_end = ram_a_row.read(i)
    row_range = row_end - row_begin
    row_begin = row_end
    for l in range(b_chunk_num):
        ram_c.write(l, 0)
    if row_range > 0:
        ram_a_col.dma_read(axi_a_col, 0, a_col_addr, row_range)
        ram_a_val.dma_read(axi_a_val, 0, a_val_addr, row_range)
        a_col_addr += row_range * (datawidth // 8)
        a_val_addr += row_range * (datawidth // 8)
        for j in range(row_range):
            idx = ram_a_col.read(j)
            b_addr = b_offset + idx * b_width * (datawidth // 8)
            ram_b.dma_read(axi_b, 0, b_addr, b_chunk_num)
            x = ram_a_val.read(j)
            strm.set_parameter('a', x)
            strm.set_source('b', ram_b, 0, b_chunk_num)
            strm.set_source('c', ram_c, 0, b_chunk_num, port=0)
            strm.set_sink('d', ram_c, 0, b_chunk_num, port=1)
            strm.run()
            strm.join()
    ram_c.dma_write(axi_c, 0, c_addr, b_chunk_num)
    c_addr += b_width * (datawidth // 8)'''

rams = [
  { type = 'RAM', name = 'ram_a', datawidth = 'packed_datawidth', addrwidth = 'log_block_size_1 - log_parallelism' },
  { type = 'RAM', name = 'ram_b', datawidth = 'packed_datawidth', addrwidth = 'log_block_size_1 + log_block_size_2 - log_parallelism' },
  { type = 'RAM', name = 'ram_c', datawidth = 'datawidth', addrwidth = 'log_block_size_0 + log_block_size_2' },
]

axis = [
  [ 'axi_narrow', 'datawidth' ],
  [ 'axi_wide', 'packed_datawidth' ],
]

comp_body = '''
for i in range(0, size_0, block_size_0):
    for j in range(0, size_2, block_size_2):
        for k in range(0, size_1, block_size_1):
            b_addr: 'multicycle' = ((j*size_1 + k) << log_word) + b_offset
            for b_idx in range(0, block_size_1 * block_size_2 // parallelism, block_size_1 // parallelism):
                axi_wide.dma_read(ram_b, b_idx, b_addr, block_size_1 // parallelism)
                b_addr += size_1 << log_word

            a_addr: 'multicycle' = ((i*size_1 + k) << log_word) + a_offset
            for ii in range(0, block_size_0 * block_size_2, block_size_2):
                axi_wide.dma_read(ram_a, 0, a_addr, block_size_1 // parallelism)

                for jj in range(block_size_2):
                    if k == 0:
                        initval = 0
                    else:
                        initval = ram_c.read(ii + jj)
                    strm.set_parameter('size', block_size_1 // parallelism)
                    strm.set_parameter('initval', initval)
                    strm.set_source('a', ram_a, 0, block_size_1 // parallelism)
                    strm.set_source('b', ram_b, jj << (log_block_size_1 - log_parallelism), block_size_1 // parallelism)
                    strm.set_sink('c', ram_c, ii + jj, 1)
                    strm.run()
                    strm.join()

                a_addr += size_1 << log_word

        c_addr: 'multicycle' = ((i*size_2 + j) << log_word) + c_offset
        for c_idx in range(0, block_size_0 * block_size_2, block_size_2):
            axi_narrow.dma_write(ram_c, c_idx, c_addr, block_size_2)
            c_addr += size_2 << log_word'''

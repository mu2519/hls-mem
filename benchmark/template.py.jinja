import random

import numpy as np

from veriloggen import *
import veriloggen.thread as vthread
from veriloggen.types import axi
from veriloggen.types.ipxact import to_ipxact

{{ imports }}


# the capacity of memory (in bytes)
memory_capacity = 2**20

datawidth = {{ datawidth }}

axi_addrwidth = 32

axilite_datawidth = 32
axilite_addrwidth = 32
axireg_length = {{ regs|length + 3 }}

counter_width = 32

simulation_period = 10000000

{{ configs }}


def mkdut() -> Module:
    m = Module('{{ dut_name }}')
    clk = m.Input('CLK')
    rst = m.Input('RST')

    counter = m.Reg('counter', counter_width, signed=False, initval=0)
    seq = Seq(m, 'seq', clk, rst)
    seq(
        counter.inc()
    )

    {%- if ram_defs is defined %}
    {{ ram_defs|indent(4) }}
    {%- endif %}

    {% if rams is defined %}
    {%- for ram in rams %}
    {%- if ram is mapping %}
    {{ ram['name'] }} = vthread.RAM(m, '{{ ram['name'] }}', clk, rst, datawidth={{ ram['datawidth'] }}, addrwidth={{ ram['addrwidth'] }}, numports={{ ram['numports']|default(1) }})
    {%- else %}
    {{ ram[0] }} = vthread.RAM(m, '{{ ram[0] }}', clk, rst, datawidth=datawidth, addrwidth={{ ram[1] }}, numports={{ ram[2]|default(1) }})
    {%- endif %}
    {%- endfor %}
    {% endif %}

    {% if pipos is defined %}
    {%- for pipo in pipos %}
    {%- if pipo is mapping %}
    {{ pipo['name'] }} = vthread.PIPO(m, '{{ pipo['name'] }}', clk, rst, datawidth={{ pipo['datawidth'] }}, addrwidth={{ pipo['addrwidth'] }}, numports={{ pipo['numports']|default(1) }})
    {%- else %}
    {{ pipo[0] }} = vthread.PIPO(m, '{{ pipo[0] }}', clk, rst, datawidth=datawidth, addrwidth={{ pipo[1] }}, numports={{ pipo[2]|default(1) }})
    {%- endif %}
    {%- endfor %}
    {% endif %}

    {%- if strm_defs is defined %}
    {{ strm_defs|indent(4) }}
    {%- endif %}

    {% if axis is defined %}
    {%- for axi in axis %}
    {{ axi|first }} = vthread.AXIM(m, '{{ axi|first }}', clk, rst, datawidth={{ axi|last }}, addrwidth=axi_addrwidth)
    {%- endfor %}
    {% else %}
    maxi = vthread.AXIM(m, 'maxi', clk, rst, datawidth=datawidth, addrwidth=axi_addrwidth)
    {% endif %}

    saxi = vthread.AXISLiteRegister(m, 'saxi', clk, rst,
                                    datawidth=axilite_datawidth,
                                    addrwidth=axilite_addrwidth,
                                    length=axireg_length)

    def main():
        while True:
            saxi.wait_flag(0, 1)
            saxi.write(1, 1)  # set busy

            start = counter

            {%- for reg in regs %}
            {{ reg }} = saxi.read({{ loop.index + 2 }})
            {%- endfor %}

            comp({{ regs|join(', ') }})

            stop = counter

            time = stop - start
            saxi.write(2, time)

            saxi.write(1, 0)  # unset busy

    def comp({{ regs|join(', ') }}):
        {{ comp_body|indent(8) }}

    thd = vthread.Thread(m, 'thd', clk, rst, main)
    thd.start()

    return m


def mktb() -> Module:
    random.seed(0, 2)

    {{ set_arrs|indent(4) }}

    memimg = np.zeros(memory_capacity // (datawidth // 8), dtype=np.int64)

    {%- for array, offset in arrs %}
    axi.set_memory(memimg, {{ array }}, datawidth, datawidth, {{ offset }})
    {%- endfor %}

    dut = mkdut()

    m = Module('tb')
    params = m.copy_params(dut)
    ports = m.copy_sim_ports(dut)
    clk = ports['CLK']
    rst = ports['RST']

    {% if axis is defined %}
    memory = axi.AxiMultiportMemoryModel(m, 'memory', clk, rst,
                                         datawidth=[{{ axis|map('last')|join(', ') }}],
                                         addrwidth=axi_addrwidth,
                                         mem_datawidth=datawidth,
                                         mem_addrwidth=0,
                                         memimg=memimg,
                                         memimg_name='memimg',
                                         memimg_datawidth=datawidth,
                                         numports={{ axis|length }})
    {%- for axi in axis %}
    memory.connect({{ loop.index0 }}, ports, '{{ axi|first }}')
    {%- endfor %}
    {% else %}
    memory = axi.AxiMemoryModel(m, 'memory', clk, rst,
                                datawidth=datawidth,
                                addrwidth=axi_addrwidth,
                                mem_datawidth=datawidth,
                                mem_addrwidth=0,
                                memimg=memimg,
                                memimg_name='memimg',
                                memimg_datawidth=datawidth)
    memory.connect(ports, 'maxi')
    {% endif %}

    _saxi = vthread.AXIMLite(m, '_saxi', clk, rst,
                             datawidth=axilite_datawidth,
                             addrwidth=axilite_addrwidth, noio=True)
    _saxi.connect(ports, 'saxi')

    axilite_wordsize = axilite_datawidth // 8

    def ctrl():
        for i in range(100):
            pass

        {%- for reg in regs %}
        _saxi.write(axilite_wordsize * {{ loop.index + 2 }}, {{ reg }})
        {%- endfor %}

        # set start
        _saxi.write(axilite_wordsize * 0, 1)

        # wait not busy
        while True:
            busy = _saxi.read(axilite_wordsize * 1)
            if not busy:
                break

        time = _saxi.read(axilite_wordsize * 2)

        flag = True
        {{ check|indent(8) }}

        if flag:
            print('AC')
        else:
            print('WA')

        print('exec time:', time)

        vthread.finish()

    thd = vthread.Thread(m, 'thd', clk, rst, ctrl)
    thd.start()

    inst = m.Instance(dut, 'dut',
                      params=m.connect_params(dut),
                      ports=m.connect_ports(dut))

    simulation.setup_waveform(m, inst)
    simulation.setup_clock(m, clk, hperiod=5)
    init = simulation.setup_reset(m, rst, m.make_reset(), period=5)
    init.add(
        Delay(simulation_period),
        Systask('finish')
    )

    return m


def run() -> None:
    tb = mktb()
    sim = simulation.Simulator(tb, sim='iverilog')
    rslt = sim.run()
    print(rslt)


def syn() -> None:
    m = mkdut()
    to_ipxact(m, clk_ports=[('CLK', ('RST',))], rst_ports=[('RST', 'ACTIVE_HIGH')])


if __name__ == '__main__':
    run()
    syn()
